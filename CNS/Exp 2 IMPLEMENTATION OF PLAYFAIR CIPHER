#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

void findPos(char key[SIZE][SIZE], char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I';
    for (int i = 0; i < SIZE; i++)
        for (int j = 0; j < SIZE; j++)
            if (key[i][j] == ch) {
                *row = i; *col = j; return;
            }
}

void playfairEncrypt(char text[], char key[SIZE][SIZE]) {
    int r1, c1, r2, c2;
    for (int i = 0; i < strlen(text); i += 2) {
        if (text[i] == text[i + 1]) text[i + 1] = 'X';
        findPos(key, toupper(text[i]), &r1, &c1);
        findPos(key, toupper(text[i + 1]), &r2, &c2);
        if (r1 == r2)
            printf("%c%c", key[r1][(c1 + 1) % SIZE], key[r2][(c2 + 1) % SIZE]);
        else if (c1 == c2)
            printf("%c%c", key[(r1 + 1) % SIZE][c1], key[(r2 + 1) % SIZE][c2]);
        else
            printf("%c%c", key[r1][c2], key[r2][c1]);
    }
}

void createKeyMatrix(char keyStr[], char key[SIZE][SIZE]) {
    int used[26] = {0}, k = 0;
    used['J' - 'A'] = 1;
    for (int i = 0; keyStr[i]; i++) {
        char ch = toupper(keyStr[i]);
        if (ch == 'J') ch = 'I';
        if (!used[ch - 'A']) key[k / SIZE][k % SIZE] = ch, used[ch - 'A'] = 1, k++;
    }
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (!used[ch - 'A']) key[k / SIZE][k % SIZE] = ch, used[ch - 'A'] = 1, k++;
        if (k == 25) break;
    }
}

int main() {
    char keyStr[50], text[100], key[SIZE][SIZE];
    printf("Enter key: ");
    scanf("%s", keyStr);
    printf("Enter plaintext: ");
    scanf("%s", text);
    createKeyMatrix(keyStr, key);
    printf("\nPlayfair Key Matrix:\n");
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) printf("%c ", key[i][j]);
        printf("\n");
    }
    printf("\nEncrypted Text: ");
    playfairEncrypt(text, key);
    return 0;
}
