import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Scanner;

public class DES_Alternative {
    private static byte[] keyBytes;

    public static void main(String[] args) {
        try {
            Scanner sc = new Scanner(System.in);
            SecretKey secretKey = generateKey();
            keyBytes = secretKey.getEncoded();

            System.out.println("DES Symmetric Key: " + Base64.getEncoder().encodeToString(keyBytes));

            System.out.print("Enter message to encrypt: ");
            String inputMessage = sc.nextLine();

            String encryptedText = encrypt(inputMessage, keyBytes);
            System.out.println("Encrypted Message: " + encryptedText);

            String decryptedText = decrypt(encryptedText, keyBytes);
            System.out.println("Decrypted Message: " + decryptedText);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static SecretKey generateKey() throws Exception {
        KeyGenerator keyGen = KeyGenerator.getInstance("DES");
        SecureRandom secureRandom = new SecureRandom();
        keyGen.init(56, secureRandom);
        return keyGen.generateKey();
    }

    private static String encrypt(String plainText, byte[] keyBytes) throws Exception {
        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "DES");
        Cipher cipher = Cipher.getInstance("DES");
        cipher.init(Cipher.ENCRYPT_MODE, keySpec);
        byte[] encrypted = cipher.doFinal(plainText.getBytes());
        return Base64.getEncoder().encodeToString(encrypted);
    }

    private static String decrypt(String encryptedText, byte[] keyBytes) throws Exception {
        SecretKeySpec keySpec = new SecretKeySpec(keyBytes, "DES");
        Cipher cipher = Cipher.getInstance("DES");
        cipher.init(Cipher.DECRYPT_MODE, keySpec);
        byte[] decodedBytes = Base64.getDecoder().decode(encryptedText);
        byte[] decrypted = cipher.doFinal(decodedBytes);
        return new String(decrypted);
    }
}
